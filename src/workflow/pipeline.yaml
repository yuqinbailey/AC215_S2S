# PIPELINE DEFINITION
# Name: ml-pipeline
components:
  comp-data-collector:
    executorLabel: exec-data-collector
  comp-data-preprocessor:
    executorLabel: exec-data-preprocessor
  comp-feature-extractor:
    executorLabel: exec-feature-extractor
  comp-model-deploy:
    executorLabel: exec-model-deploy
    inputDefinitions:
      parameters:
        bucket_name:
          defaultValue: ''
          isOptional: true
          parameterType: STRING
  comp-model-training:
    executorLabel: exec-model-training
    inputDefinitions:
      parameters:
        batch_size:
          defaultValue: 4.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        bucket_name:
          defaultValue: ''
          isOptional: true
          parameterType: STRING
        epochs:
          defaultValue: 1.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        location:
          defaultValue: ''
          isOptional: true
          parameterType: STRING
        model_name:
          defaultValue: RegNet_v1
          isOptional: true
          parameterType: STRING
        project:
          defaultValue: ''
          isOptional: true
          parameterType: STRING
        staging_bucket:
          defaultValue: ''
          isOptional: true
          parameterType: STRING
        train_base:
          defaultValue: false
          isOptional: true
          parameterType: BOOLEAN
deploymentSpec:
  executors:
    exec-data-collector:
      container:
        args:
        - cli.py
        - --num_workers 4
        image: lildanni/data-collection
    exec-data-preprocessor:
      container:
        args:
        - cli.py
        - -p playing_bongo
        - -n 10
        image: lildanni/data-preprocessing
    exec-feature-extractor:
      container:
        args:
        - ./feature_extract.sh
        - -p
        - playing_bongo
        - -n 1
        image: lildanni/feature-extraction
    exec-model-deploy:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - model_deploy
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-aiplatform'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef model_deploy(\n    bucket_name: str = \"\",\n):\n    print(\"\
          Model Training Job\")\n\n    import google.cloud.aiplatform as aip\n\n \
          \   # List of prebuilt containers for prediction\n    # https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers\n\
          \    serving_container_image_uri = (\n        \"us-docker.pkg.dev/vertex-ai/training/pytorch-gpu.1-13.py310:latest\"\
          \n    )\n\n    display_name = \"Silence to Sound Model\"\n    ARTIFACT_URI\
          \ = f\"gs://{bucket_name}/model\"\n\n    # Upload and Deploy model to Vertex\
          \ AI\n    # Reference: https://cloud.google.com/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Model#google_cloud_aiplatform_Model_upload\n\
          \    deployed_model = aip.Model.upload(\n        display_name=display_name,\n\
          \        artifact_uri=ARTIFACT_URI,\n        serving_container_image_uri=serving_container_image_uri,\n\
          \    )\n    print(\"deployed_model:\", deployed_model)\n    # Reference:\
          \ https://cloud.google.com/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Model#google_cloud_aiplatform_Model_deploy\n\
          \    endpoint = deployed_model.deploy(\n        deployed_model_display_name=display_name,\n\
          \        traffic_split={\"0\": 100},\n        machine_type=\"n1-standard-4\"\
          ,\n        accelerator_count=0,\n        min_replica_count=1,\n        max_replica_count=1,\n\
          \        sync=True,\n    )\n    print(\"endpoint:\", endpoint)\n\n"
        image: python:3.10
    exec-model-training:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - model_training
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-aiplatform'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef model_training(\n    project: str = \"\",\n    location: str\
          \ = \"\",\n    staging_bucket: str = \"\",\n    bucket_name: str = \"\"\
          ,\n    epochs: int = 1,\n    batch_size: int = 4,\n    model_name: str =\
          \ \"RegNet_v1\",\n    train_base: bool = False,\n):\n    print(\"Model Training\
          \ Job\")\n\n    import google.cloud.aiplatform as aip\n\n    # Initialize\
          \ Vertex AI SDK for Python\n    aip.init(project=project, location=location,\
          \ staging_bucket=staging_bucket)\n\n    # We're using PyTorch\n    container_uri\
          \ = \"us-docker.pkg.dev/vertex-ai/training/pytorch-gpu.1-13.py310:latest\"\
          \n    python_package_gcs_uri = f\"{staging_bucket}/s2s-app-trainer.tar.gz\"\
          \n\n    job = aip.CustomPythonPackageTrainingJob(\n        display_name=\"\
          s2s-training\",\n        python_package_gcs_uri=python_package_gcs_uri,\n\
          \        python_module_name=\"trainer.task\",\n        container_uri=container_uri,\n\
          \        project=project,\n    )\n\n    CMDARGS = [\n        f\"--epochs={epochs}\"\
          ,\n        f\"--batch_size={batch_size}\",\n        f\"--model_name={model_name}\"\
          ,\n        f\"--bucket_name={bucket_name}\",\n    ]\n    if train_base:\n\
          \        CMDARGS.append(\"--train_base\")\n\n    MODEL_DIR = staging_bucket\n\
          \    TRAIN_COMPUTE = \"n1-standard-4\"\n    TRAIN_GPU = \"NVIDIA_TESLA_T4\"\
          \n    TRAIN_NGPU = 1\n\n    print(python_package_gcs_uri)\n\n    # Run the\
          \ training job on Vertex AI\n    # sync=True, # If you want to wait for\
          \ the job to finish\n    job.run(\n        model_display_name=None,\n  \
          \      args=CMDARGS,\n        replica_count=1,\n        machine_type=TRAIN_COMPUTE,\n\
          \        # accelerator_type=TRAIN_GPU,\n        # accelerator_count=TRAIN_NGPU,\n\
          \        base_output_dir=MODEL_DIR,\n        sync=True,\n    )\n\n"
        image: python:3.10
pipelineInfo:
  name: ml-pipeline
root:
  dag:
    tasks:
      data-collector:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-data-collector
        taskInfo:
          name: Data Collector
      data-preprocessor:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-data-preprocessor
        dependentTasks:
        - data-collector
        taskInfo:
          name: Data Processor
      feature-extractor:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-feature-extractor
        dependentTasks:
        - data-preprocessor
        taskInfo:
          name: Feature Extractor
      model-deploy:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-model-deploy
        dependentTasks:
        - model-training
        inputs:
          parameters:
            bucket_name:
              runtimeValue:
                constant: s2s-ml-workflow
        taskInfo:
          name: Model Deploy
      model-training:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-model-training
        dependentTasks:
        - feature-extractor
        inputs:
          parameters:
            batch_size:
              runtimeValue:
                constant: 4.0
            bucket_name:
              runtimeValue:
                constant: s2s-ml-workflow
            epochs:
              runtimeValue:
                constant: 1.0
            location:
              runtimeValue:
                constant: us-east1
            model_name:
              runtimeValue:
                constant: RegNet_v1
            project:
              runtimeValue:
                constant: ac215project-398818
            staging_bucket:
              runtimeValue:
                constant: gs://s2s_data
            train_base:
              runtimeValue:
                constant: false
        taskInfo:
          name: Model Training
schemaVersion: 2.1.0
sdkVersion: kfp-2.3.0
